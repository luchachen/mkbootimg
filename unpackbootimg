#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2015, The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
from sys import exit
from argparse import ArgumentParser, FileType
from os import rename, makedirs
from os.path import basename, exists
from struct import unpack, calcsize
import zlib
import os, json, binascii, shutil
from unpack_bootimg import *
import pprint
import sys

from lib.utils import *
from lib.mkimage  import mkimage_header, PART_MAGIC
__LIBARCHIVE__= False
if __LIBARCHIVE__:
    from libarchive.extract import *
    from libarchive.read import *
    from libarchive.entry import *
else:
    from patoolib import extract_archive


def auto_unpack(fmt, f):
    size = calcsize(fmt)
    data = f.read(size)
    return unpack(fmt, data[0:size])

def get_magic_off(f):
    BOOT_MAGIC = 'ANDROID!'.encode()

    #mtk v1 sign BFBF offset 0x4040(16448)
    for i in range(16448+513):
        f.seek(i)
        tmp = f.read(len(BOOT_MAGIC))
        if tmp == BOOT_MAGIC:
            print('Android magic found at: %d' % i)
            return i

    print('Android boot magic not found.');
    exit(1)

def seek_padding(f, size, pagesize):
    pagemask = pagesize - 1;
    if((size & pagemask) != 0):
        count = pagesize - (size & pagemask);
        f.seek(count, 1);

def write_input_to_file(args, filename, size):
    with open(filename, 'wb') as f_out:
        f_out.write(args.boot_img.read(size))

    seek_padding(args.boot_img, size, args.page_size)

def fix_ramdisk_extension(header, filename):
    bytes = []
    hd_size = calcsize(mkimage_header) 
    with open(filename, 'rb') as f:
        data = unpack(mkimage_header, f.read(hd_size))
        if data[0] == PART_MAGIC:
            fn = filename+'.hdr'
            rename(filename, fn)
            header.mkimage = fn
            with open(filename, 'wb') as wf:
                wf.write(f.read(data[1]))
    with open(filename, 'rb') as f:
        data = f.read(2)
        if(len(data))!=2:
            return
        bytes = unpack('BB', data)

    if bytes[0]==0x02 and bytes[1]==0x21:
        fn = filename+'.lz4'
    else:
        fn = filename+'.gz'
    rename(filename, fn)
    return fn

def is_gzip_package(filename):
    bytes = []
    with open(filename, 'rb') as f:
        data = f.read(3)
        if(len(data))!=3:
            return False
        bytes = unpack('BBB', data)

    return bytes[0]==0x1f and bytes[1]==0x8b and bytes[2]==0x08

def is_arm64(filename):
    data = None
    with open(filename, 'rb') as f:
        fmt = '2I6Q2I'
        size = calcsize(fmt)
        buf = f.read(size)
        if(len(buf))!=size:
            return False
        data = unpack(fmt, buf)

    return data[8]==0x644D5241

def write_data(args, header, off):
    file_prefix = args.out
    if file_prefix and file_prefix[-1]!='/':
        file_prefix += '/'
    file_prefix += basename(args.boot_img.name) + '-'

    if not exists(args.out):
        makedirs(args.out)


    """
    seek_padding(args.boot_img, header.boot_header_size, header.page_size)

    write_input_to_file(args, file_prefix+'zImage', header.kernel_size)
    write_input_to_file(args, file_prefix+'ramdisk', header.ramdisk_size)
    write_input_to_file(args, file_prefix+'second', header.second_size)
    if header.dtb_size > 1:
        write_input_to_file(args, file_prefix+'dt', header.dtb_size)
    if header.recovery_dtbo_size > 0:
        write_input_to_file(args, file_prefix+'recovery_dtbo', header.recovery_dtbo_size)
    """

    fn = None
    if header.ramdisk_size > 0:
        fn = fix_ramdisk_extension(header, os.path.join(args.out, 'ramdisk'))
    header.Save(file_prefix+'bootimg.json')

    if fn:
        _ramdisk = os.path.join(os.path.dirname(fn), 'root')
        if not exists(_ramdisk):
            makedirs(_ramdisk)
        if __LIBARCHIVE__:
            _fd = open(fn, 'rb')
            _fd_cpio = open(file_prefix+'cpio.json', 'wb')
            with fd_reader(_fd.fileno()) as _archives:
                _dict = {}
                _fd_cpio.write('   {0:32s}    {1:11s} {2:4s}   {3:4s}   {4:4s}   {5:s}\n'.format(
                                  'pathname', 'mode', 'mtime', 'major', 'minor', 'linkpath'))

                for entry in _archives:
                    _dict['{0:32s}'.format(entry.pathname)] = '{0:s}  0x{1:04x}  0x{2:04x}  0x{3:04x}  {4:s}'.format(
                       entry.strmode, entry.mtime, entry.rdevmajor, entry.rdevminor, entry.linkpath)
                json.dump(_dict, _fd_cpio, indent=2)
            _fd_cpio.close()
            _curdir = os.getcwd()

            _fd.seek(0)
            os.chdir(_ramdisk)

            extract_fd(_fd.fileno(), EXTRACT_FFLAGS | EXTRACT_XATTR
                    | EXTRACT_MAC_METADATA | EXTRACT_TIME | EXTRACT_PERM | EXTRACT_ACL)
            os.chdir(_curdir)
            _fd.close()
        else:
            efn = extract_archive(fn, verbosity=0, outdir=args.out)
            _efn = os.path.join(efn, 'ramdisk')
            #print(_efn)
            #os.rename(efn, _efn)
            extract_archive(_efn, verbosity=1, outdir=_ramdisk, interactive=True)


    if header.kernel_size >= 2:
        kfn = os.path.join(args.out, 'kernel')
        if is_gzip_package(kfn):
            with open(kfn, 'rb') as f_in:
                # seek past gzip header
                f_in.seek(10)

                # write uncompressed zImage
                with open(file_prefix+'zImage.gunzip', 'wb') as f_out:
                    decomp = zlib.decompressobj(-15)
                    f_out.write(decomp.decompress(f_in.read()))

                # write fdt
                with open(file_prefix+'zImage.fdt', 'wb') as f_out:
                    f_out.write(decomp.unused_data[8:])

        elif not is_arm64(kfn):
            with open(kfn, 'rb') as f_in:
                # get kernel size
                f_in.seek(0x28)
                unpacked = auto_unpack('2I', f_in)
                zimage_start = unpacked[0]
                zimage_end = unpacked[1]
                zimage_size = zimage_end - zimage_start;

                if zimage_size<header.kernel_size:
                    # write zImage
                    f_in.seek(0)
                    with open(file_prefix+'zImage.real', 'wb') as f_out:
                        f_out.write(f_in.read(zimage_size))

                    # write fdt
                    with open(file_prefix+'zImage.fdt', 'wb') as f_out:
                        f_out.write(f_in.read())

def main():
    args = parse_cmdline()
    off = get_magic_off(args.boot_img)
    args.boot_img.seek(off)
    if os.path.isdir(args.out) and not args.out == './' :
        ask = raw_input('The Output Dir %s have been exist. Can delete all It:(Y/n)\n' % (args.out))
        if ask == 'Y':
            shutil.rmtree(args.out)
    create_out_dir(args.out)
    info=unpack_bootimage(args)
    header=Bunch(info)
    args.page_size = header.page_size

    pprint.pprint(header.Get(None))

    write_data(args, header, off)

if __name__ == '__main__':
    main()
