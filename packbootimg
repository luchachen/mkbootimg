#!/usr/bin/env python
# -*- coding: UTF-8 -*-
# Copyright 2015, The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function
from sys import argv, exit, stderr
from argparse import ArgumentParser, FileType, Action
import os
from os import fstat
from os.path import basename, dirname,join
from struct import pack,unpack, calcsize
from hashlib import sha1
import sys
import re
import json
import glob
from subprocess import *
import subprocess
import shutil
import pprint
from mkimage  import mkimage_header, PART_MAGIC
from string import atoi, replace

ARMV8MAGIC='\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7\x00\x01\x00\x00\x00'
BOOT_HEADER_VERSION_ZERO=0
BOOT_HEADER_VERSION_ONE=1

def getscript():
    return os.path.abspath(os.path.dirname(os.path.realpath(__file__)))

def filesize(f):
    if f is None:
        return 0
    try:
        return fstat(f.fileno()).st_size
    except OSError:
        return 0


def update_sha(sha, f):
    if f:
        sha.update(f.read())
        f.seek(0)
        sha.update(pack('I', filesize(f)))
    else:
        sha.update(pack('I', 0))


def pad_file(f, padding):
    pad = (padding - (f.tell() & (padding - 1))) & (padding - 1)
    f.write(pack(str(pad) + 'x'))


def get_number_of_pages(image_size, page_size):
    """calculates the number of pages required for the image"""
    return (image_size + page_size - 1) / page_size


def get_recovery_dtbo_offset(args):
    """calculates the offset of recovery_dtbo image in the boot image"""
    num_header_pages = 1 # header occupies a page
    num_kernel_pages = get_number_of_pages(filesize(args.kernel), args.page_size)
    num_ramdisk_pages = get_number_of_pages(filesize(args.ramdisk), args.page_size)
    num_second_pages = get_number_of_pages(filesize(args.second), args.page_size)
    dtbo_offset = args.page_size * (num_header_pages + num_kernel_pages +
                                   num_ramdisk_pages + num_second_pages)
    return dtbo_offset

def write_header(args):
    BOOT_MAGIC = 'ANDROID!'.encode()
    args.output.write(pack('8s', BOOT_MAGIC))
    args.output.write(pack('10I',
        filesize(args.kernel),                          # size in bytes
        args.base + args.kernel_offset,                 # physical load addr
        filesize(args.ramdisk),                         # size in bytes
        args.base + args.ramdisk_offset,                # physical load addr
        filesize(args.second),                          # size in bytes
        args.base + args.second_offset,                 # physical load addr
        args.base + args.tags_offset,                   # physical addr for kernel tags
        args.page_size,                                 # flash page size we assume
        filesize(args.dt) if args.header_version \
                == BOOT_HEADER_VERSION_ZERO 
                else args.header_version,               # size in bytes or version of bootimage header
        (args.os_version << 11) | args.os_patch_level)) # os version and patch level
    args.output.write(pack('16s', args.board.encode())) # asciiz product name
    args.output.write(pack('512s', args.cmdline[:512].encode()))

    sha = sha1()
    update_sha(sha, args.kernel)
    update_sha(sha, args.ramdisk)
    update_sha(sha, args.second)
    if args.header_version == BOOT_HEADER_VERSION_ZERO:
        update_sha(sha, args.dt)

    if args.header_version == BOOT_HEADER_VERSION_ONE:
        update_sha(sha, args.recovery_dtbo)
    img_id = pack('32s', sha.digest())

    args.output.write(img_id)
    args.output.write(pack('1024s', args.cmdline[512:].encode()))
    pad_file(args.output, args.page_size)
    return img_id

class ValidateStrListLenAction(Action):
    def __init__(self, option_strings, dest, **kwargs):
        if 'maxlen' not in kwargs:
            raise ValueError('maxlen must be set')
        self.maxlen = int(kwargs['maxlen'])
        del kwargs['maxlen']
        super(ValidateStrListLenAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        """
        alen #androidboot.selinux=permissive printk.disable_uart=0 rdinit=/sbin/init androidboot.verify=disable'
        append cmdline from process_cmdline

        """
        alen = 99  #androidboot.selinux=permissive printk.disable_uart=0 rdinit=/sbin/init androidboot.verify=disable'
        if namespace.input:
            alen += len(namespace.input['cmdline'])
        if isinstance(values, list):
            if len(' '. join(values)) > (self.maxlen - alen):
                raise ValueError('String argument too long: max {0:d}, got {1:d}'.
                    format(self.maxlen - alen, len(' '. join(values))))
        else:
            if len(values) > (self.maxlen - alen):
                raise ValueError('String argument too long: max {0:d}, got {1:d}'.
                    format(self.maxlen - alen, len(values)))
        setattr(namespace, self.dest, values)

class ValidateStrLenAction(Action):
    def __init__(self, option_strings, dest, nargs= None, **kwargs):
        if 'maxlen' not in kwargs:
            raise ValueError('maxlen must be set')
        self.maxlen = int(kwargs['maxlen'])
        del kwargs['maxlen']
        super(ValidateStrLenAction, self).__init__(option_strings, dest, **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) > self.maxlen:
            raise ValueError('String argument too long: max {0:d}, got {1:d}'.
                format(self.maxlen, len(values)))
        setattr(namespace, self.dest, values)


def write_padded_file(f_out, f_in, padding):
    if f_in is None:
        return
    f_out.write(f_in.read())
    pad_file(f_out, padding)


def parse_int(x):
    return int(x, 0)

def parse_os_version(x):
    match = re.search(r'^(\d{1,3})(?:\.(\d{1,3})(?:\.(\d{1,3}))?)?', x)
    if match:
        a = int(match.group(1))
        b = c = 0
        if match.lastindex >= 2:
            b = int(match.group(2))
        if match.lastindex == 3:
            c = int(match.group(3))
        # 7 bits allocated for each field
        assert a < 128
        assert b < 128
        assert c < 128
        return (a << 14) | (b << 7) | c
    return 0

def parse_os_patch_level(x):
    match = re.search(r'^(\d{4})-(\d{2})-(\d{2})', x)
    if match:
        y = int(match.group(1)) - 2000
        m = int(match.group(2))
        # 7 bits allocated for the year, 4 bits for the month
        assert y >= 0 and y < 128
        assert m > 0 and m <= 12
        return (y << 4) | m
    return 0

class JSONAction(Action):
    """An argparse action that concatenates "-i" "INPUT" """

    def __call__(self, parser, namespace, value, name):
        if not value:
            return
        if os.path.isdir(value):
            js = glob.glob(join(value, '*-bootimg.json'))
            if len(js) > 1:
                raise ValueError('Dir {0:s} argument contain too many json: {1:s}'.
                    format(value, js))
            value = js[0]
        try:
            with open(value, 'rb') as f_in:
                _dict = json.load(f_in)
            _dict[u'injson'] = value
            setattr(namespace, self.dest,_dict)
        except (IOError, ValueError):
            e = sys.exc_info()[1]
            raise ValueError(' -i {0:s} {1:s}'.
                format(value, e))
        #pprint.pprint(namespace.__dict__, indent =4)

def write_str_to_file(filename, s):
    with open(filename, 'wb') as f:
        f.write(s.encode())

def is_arm64(filename):
    data = None
    with open(filename, 'rb') as f:
        fmt = '24s'
        size = calcsize(fmt)
        buf = f.read(size)
        if(len(buf))!=size:
            return False
        data = unpack(fmt, buf)

    return data[0]==ARMV8MAGIC

def inputjson(args):
    return args.input['injson']


def process_input(args, cmdparse):
    """An argparse action that concatenates "-i" "INPUT" """
    value = None
    if args.input:
        value = inputjson(args)
        _dict = args.input

        for k, v in _dict.items():
            if k == 'cmdline':
                continue
            elif v is not None and k in args.__dict__:
                if getattr(args, k) == cmdparse.get_default(k):
                    if k == 'os_version':
                        setattr(args, k, parse_os_version(v))
                    elif k == 'os_patch_level':
                        setattr(args, k, parse_os_patch_level(v))
                    else:
                        setattr(args, k, v)
    elif args.kernel:
        value = args.kernel.name
    try:
        _prefix = get_prefix(value)
        mfns = glob.glob(_prefix+'-zImage')
        if len(mfns) > 1:
            print('warning: too many files %s' % mfns)
        if args.kernel == cmdparse.get_default('kernel'):
            setattr(args, 'kernel', open(mfns[0]))
        if args.second == cmdparse.get_default('second'):
            setattr(args, 'second', open(_prefix+'-second'))
        if args.header_version == BOOT_HEADER_VERSION_ONE:
            if os.path.exists(os.path.join(_prefix, 'recovery_dtbo')):
                setattr(args, 'recovery_dtbo', open(_prefix+'recovery_dtbo'))
        if args.header_version > BOOT_HEADER_VERSION_ONE and args.dt == cmdparse.get_default('dt'):
            setattr(args, 'dt', open(_prefix+'-dt'))

    except (IOError, ValueError):
        _dict = {}
        e = sys.exc_info()[1]
        raise ValueError(' -i {0:s} {1:s}'.
            format(value, e))
    #pprint.pprint(args.__dict__, indent =4)

def get_android_version(args, rootdir):
    version = 4
    fn_selinux = join(rootdir, 'selinux_version')
    fn_prop = join(rootdir, 'default.prop')
    if args.input and args.input.has_key('os_version') and args.input['os_version']:
        version =  atoi(args.input['os_version'].split(".")[0])
    elif os.path.isfile(fn_selinux):
        with open(fn_selinux) as f:
            for buildFingerprintOverride in f.readlines():
                #print(buildFingerprintOverride)
                fingerprintPrefix = buildFingerprintOverride.split(":")[0]
                fingerprintTail = buildFingerprintOverride.split(":")[1]
                versionOverride = fingerprintTail.split("/")[0]
                version = atoi(versionOverride.split(".")[0])
    elif os.path.isfile(fn_prop):
        with open(fn_prop) as f:
            for line in f.readlines():
                if line.split("=")[0] in 'ro.bootimage.build.fingerprint':
                    buildFingerprintOverride = line.split("=")[1]
                    #print(buildFingerprintOverride)
                    fingerprintPrefix = buildFingerprintOverride.split(":")[0]
                    fingerprintTail = buildFingerprintOverride.split(":")[1]
                    versionOverride = fingerprintTail.split("/")[0]
                    version = atoi(versionOverride.split(".")[0])
    return version

def norm_version(version):
    ver = 4
    if version <= 6:
        ver = 6
    elif version == 7:
        ver = 7
    elif version == 8:
        ver = 8
    elif version == 9:
        ver = 9
    else:
        raise(ValueError(' could not support the android version {0:d}'.
            format(version)))
    return ver

def patch_prop(args, rootdir):
    prop_fn = join(rootdir, 'default.prop')
    done = False
    props = ''
    for line in open(prop_fn):
        if 'ro.secure=' or 'ro.adb.secure=' in line:
            line = replace(line, '1', '0')
        if 'ro.debuggable=' in line:
            line = replace(line, '0', '1')
        if 'persist.sys.usb.config=' in line:
            line = line.split('=')[0] + '=mtp,adb\n'
            done = True
        props += line
    if not done:
        props +='persist.sys.usb.config=mtp,adb\n'
    with open(prop_fn, 'wb') as f:
        f.write(props.encode('utf-8'))

def _run(cmd):
    """Replacement for os.system, with hiding of stdout+stderr messages.
    """
    with open(os.devnull, 'wb') as devnull:
        try:
            subprocess.check_call(
                    cmd.split(), stdout=devnull, stderr=subprocess.STDOUT)
            if None:
                subprocess.check_call(
                        cmd.split(), stderr=subprocess.STDOUT)
        except(OSError, ValueError):
            e = sys.exc_info()[1]
            raise ValueError('command {0:s} {1:s}'.
                format(cmd.split(), e))


def permissive_adbd(args, rootdir, ver):
    com = ('{sepinject:s}  -Z adbd -P {sepolicy:s} -o {outfile:s}'.format( \
        sepinject=join(getscript(), 'sepolicy-inject-%d' % norm_version(ver)),\
        sepolicy=join(rootdir, 'sepolicy'), outfile=join(dirname(rootdir), 'sepolicy')))
    _run(com)
    com = ('{sepinject:s}  -Z shell -P {outfile:s} -o {sepolicy:s}'.format(  \
        sepinject=join(getscript(), 'sepolicy-inject-%d' % norm_version(ver)),\
        outfile=join(dirname(rootdir), 'sepolicy'), sepolicy=join(rootdir, 'sepolicy')))
    _run(com)
    com = ('{ckpolicy:s}  -M -b {sepolicy:s}'.format(  \
        ckpolicy=join(getscript(), 'checkpolicy-%d' % norm_version(ver)),\
        sepolicy=join(rootdir, 'sepolicy')))
    _run(com)


def root_action(args, rootdir):
    ver = get_android_version(args, rootdir)
    shutil.copy2(join(getscript(), 'ramdisk/init.lucha.rc'), join(rootdir,'init.lucha.rc'))
    _rc_fn=join(rootdir,'init.rc')
    _fd_rc=open(_rc_fn, 'rb')
    init_rc_str=''
    try:
        done=False
        for line in _fd_rc:
            if 'import /init.lucha.rc' in line:
                done=True
            if not done and 'import /init.environ.rc' in line:
                init_rc_str += 'import /init.lucha.rc\n'
            init_rc_str +=line
        with open(_rc_fn, 'wb') as f:
            #TODO init_rc_str.encode()
            f.write(init_rc_str)
    finally:
        _fd_rc.close()
    suffix='marmv7-%d' % norm_version(ver)
    if is_arm64(join(rootdir, 'init')):
        suffix='marmv8-%d' % norm_version(ver)
    if args.sign == '':
        pass
        shutil.copy2(join(getscript(), 'security', 'verity_key'), join(rootdir,'verity_key'))
    shutil.copy2(join(getscript(), 'ramdisk/sbin/adbd%s' %(suffix)), join(rootdir,'sbin/adbd'))
    if ver <= 7:
        patch_prop(args, rootdir)
        if ver >= 5:
            permissive_adbd(args, rootdir, ver)
    elif ver == 8:
        shutil.copy2(join(getscript(), 'ramdisk/sbin/init%s' %(suffix)), join(rootdir,'sbin/init'))
        shutil.copy2(join(getscript(), 'ramdisk/sbin/su.cil'), join(rootdir,'sbin/su.cil'))
        shutil.copy2(join(getscript(), 'ramdisk/sbin/dontauditsu.cil'), join(rootdir,'sbin/dontauditsu.cil'))
        shutil.copy2(join(getscript(), 'ramdisk/sbin/init.sh'), join(rootdir,'sbin/init.sh'))
    else:
        raise(ValueError(' could not support the android version {0:d}'.
            format(version)))

def get_prefix(infile):
    (_prefix, _ext) = basename(infile).rsplit('-', 1)
    _prefix = join(dirname(infile),_prefix)
    return _prefix

def process_ramdisk(args):
    _fd = None
    value = None
    setattr(args, 'rootdir', None)
    if not args.input:
        value = get_prefix(args.kernel.name) + '-ramdisk.gz'
    else:
        value = inputjson(args)
    if not args.ramdisk:
        if args.input['ramdisk_size'] == 0:
            print("SYSTEM AS ROOT")
            return
        if args.level == 0:
            _prefix = get_prefix(value)
            mfns = glob.glob(_prefix+'-ramdisk.gz')
            if len(mfns) > 1:
                raise(ValueError(' auto ramdisks:{0:s} in level {1:d}'.
                    format(mfns, 0)))
        else:
            value = join(dirname(value), 'ramdisk')
    else:
        value = os.path.normpath(args.ramdisk)
    if os.path.isdir(value):
        #_curdir = os.getcwd()
        _fn = value
        if args.level:
            root_action(args, _fn)
        _fd = open(_fn+'.gz', 'wb')
        #os.chdir(value)
        p1 = Popen([join(getscript(), "mkbootfs"), "-f", join(getscript(), "etc/boot_filesystem_config.txt"), _fn], stdout=PIPE)
        p2 = Popen([join(getscript(), "minigzip")], stdin=p1.stdout, stdout=_fd)
        output = p2.communicate()[0]

        #os.chdir(_curdir)
        _fd.flush()

        """unset gzip timestamp, gzip head 4->8"""
        #_fd.seek(4)
        #_fd.write(pack('4x'))
        """unset timestamp end"""

        _fd.close()
        _fd = open(_fn+'.gz', 'rb')
        setattr(args, 'rootdir', _fn)
        setattr(args, 'ramdisk', _fd)
    elif os.path.isfile(value):
        _fd = open(value, 'rb')
        setattr(args, 'ramdisk', _fd)
    else:
        raise(ValueError(' not found ramdisks:{0:s} in level {1:d}'.
            format(value, args.level)))
    if args.input and args.input.has_key('mkimage'):
        _fn = os.path.splitext(_fd.name)[0] + '.hdr'
        with open(_fn, 'wb') as f:
            f.write(pack(mkimage_header, PART_MAGIC, filesize(_fd), 'ROOTFS'.encode(), 0, (b'\xFF'*472)))
            f.write(_fd.read(filesize(_fd)))
        setattr(args, 'ramdisk', open(_fn, 'rb'))

def process_dtb(args):
    pass

def process_cmdline(args):
    cmdline = ''
    if args.cmdline:
        cmdline = args.cmdline[0] + ' '
    if args.input:
        cmdline += args.input['cmdline']
    if args.level:
        if args.level == 2:
            cmdline += " androidboot.selinux=permissive"
        cmdline += " printk.disable_uart=0"
        cmdline += " uart_enable=1"
        cmdline += " rdinit=/sbin/init"
        if os.path.isdir(args.sign):
            if args.rootdir:
                try:
                    _fn = join(args.rootdir, 'verity_key')
                    sha = sha1()
                    with open(_fn, 'rb') as _fd:
                        update_sha(sha, _fd)

                    vsha = sha1()
                    vfn = join(getscript(), 'security', 'verity_key')
                    with open(vfn, 'rb') as _fd:
                        update_sha(vsha, _fd)
                    args.disable_verity = not vsha.hexdigest() == sha.hexdigest()
                except (IOError, ValueError):
                    e = sys.exc_info()[1]
                    print(ValueError(' rootdir:{0:s} {1:s}'.
                        format(args.rootdir, e)))

        if args.disable_verity:
            cmdline += " androidboot.verify=disable"
    if len(args.cmdline) > 1:
        cmdline += ' ' + ' '. join(args.cmdline[1:])
    if len(cmdline) > 1024:
        raise(ValueError(' cmdline:{0:s} >  {1:d}'.
            format(cmdline, 1024)))
    args.cmdline = cmdline


def parse_cmdline():
    parser = ArgumentParser()

    igparser = parser.add_mutually_exclusive_group(required=True)
    igparser.add_argument('input', metavar='infile',  help='input the dirpath/filename of bootimg.json', action=JSONAction, nargs='?')
    igparser.add_argument('--kernel', help='path to the kernel', type=FileType('rb'),
                        required=False)

    parser.add_argument('-l', '--level',  help='Root Android Level, 0: only re-pack, 1: (default) only adbd permissive,  2: full permissive', type=parse_int,
                                   choices=[i for i in range(0,3)], default=1)
    parser.add_argument('-s', '--sign',  help='signing boot image type, (default) will disable dm-verity, such as Pepito or U50APLUSTMO or dirpath of verity_key', type=str,
                                   default=join(getscript(), 'security'))
    parser.add_argument('-d', '--disable_verity',  help='disable dm-verity checking when verity system/vendor verity table signature fail',
                                   action='store_true')
    mkparser = parser.add_argument_group()
    
    mkparser.add_argument('--ramdisk', help='path to the dir/file ramdisk', type=str)
    mkparser.add_argument('--second', help='path to the 2nd bootloader', type=FileType('rb'))
    mkparser.add_argument('--recovery_dtbo', help='path to the recovery DTBO', type=FileType('rb'))
    mkparser.add_argument('--cmdline', help='extra arguments to be passed on the '
                        'kernel command line', default='', action=ValidateStrListLenAction, maxlen=1024, nargs='*') #maxlen=1536-99
    mkparser.add_argument('--base', help='base address', type=parse_int, default=0x10000000)
    mkparser.add_argument('--kernel_offset', help='kernel offset', type=parse_int, default=0x00008000)
    mkparser.add_argument('--ramdisk_offset', help='ramdisk offset', type=parse_int, default=0x01000000)
    mkparser.add_argument('--second_offset', help='2nd bootloader offset', type=parse_int,
                        default=0x00f00000)
    mkparser.add_argument('--os_version', help='operating system version', type=parse_os_version,
                        default=0)
    mkparser.add_argument('--os_patch_level', help='operating system patch level',
                        type=parse_os_patch_level, default=0)
    mkparser.add_argument('--tags_offset', help='tags offset', type=parse_int, default=0x00000100)
    mkparser.add_argument('--board', help='board name', default='', action=ValidateStrLenAction,
                        maxlen=16)
    mkparser.add_argument('--page_size', help='page size', type=parse_int,
                        choices=[2**i for i in range(11,18)], default=2048)
    mkparser.add_argument('--id', help='print the image ID on standard output',
                        action='store_true')
    mkparser.add_argument('--dt', help='path to the device tree image', type=FileType('rb'))
    mkparser.add_argument('--header_version', help='boot image header version', type=parse_int, default=0)
    parser.add_argument('-o', '--output', help='output file name', type=FileType('wb'),
                        required=True)
    return parser

def process_sign(args):
    #qcom 
    if os.path.isdir(args.sign):
        com = ('{bootsigner:s} /boot {infile:s} {veritypk:s} {veritypem:s} {infile:s}'.format(\
                bootsigner=join(getscript(), 'boot_signer'), infile=os.path.abspath(args.output.name), \
                veritypk=join(args.sign, 'verity.pk8'), veritypem=join(args.sign,'verity.x509.pem')))
        _run(com)
    else:
        com = ('{bootsigner:s} {project:s} {rollbackver:d} boot {infile:s} '.format(\
                bootsigner=join(getscript(), 'jrdsz_sign_tool/st.sh'), project=args.sign, rollbackver=0, \
                infile=os.path.abspath(args.output.name)))
        _run(com)
    #retcode = call([join(getscript(), 'jrdsz_sign_tool/st.sh'), 'Pepito', '0', 'boot', os.path.abspath(args.output.name)])


def write_data(args):
    write_padded_file(args.output, args.kernel, args.page_size)
    write_padded_file(args.output, args.ramdisk, args.page_size)
    write_padded_file(args.output, args.second, args.page_size)
    if args.header_version > BOOT_HEADER_VERSION_ONE:
        write_padded_file(args.output, args.dt, args.page_size)

    if args.header_version == BOOT_HEADER_VERSION_ONE:
        args.output.write(pack('I', filesize(args.recovery_dtbo)))   # size in bytes
        if args.recovery_dtbo:
            args.output.write(pack('Q', get_recovery_dtbo_offset(args))) # recovery dtbo offset
        else:
            args.output.write(pack('Q', 0)) # Will be set to 0 for devices without a recovery dtbo
        args.output.write(pack('I', args.output.tell() + 4))         # size of boot header

def main():
    cmdparse = parse_cmdline()
    args = cmdparse.parse_args()
    #pprint.pprint(args.__dict__, indent=4)
    process_input(args, cmdparse)
    #pprint.pprint(args.__dict__, indent=4)
    process_ramdisk(args)
    #pprint.pprint(args.__dict__, indent=4)
    process_cmdline(args)
    pprint.pprint(args.__dict__, indent =4)
    img_id = write_header(args)
    write_data(args)
    args.output.flush()
    args.output.close()
    process_sign(args)
    if args.id:
        if isinstance(img_id, str):
            # Python 2's struct.pack returns a string, but py3 returns bytes.
            img_id = [ord(x) for x in img_id]
        print('0x' + ''.join('{:02x}'.format(c) for c in img_id))

if __name__ == '__main__':
    main()
